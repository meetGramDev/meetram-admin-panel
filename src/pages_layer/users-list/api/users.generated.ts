/** THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. */
import { gql } from '@apollo/client'
import * as Apollo from '@apollo/client'

import * as Types from '../../../shared/api/models.gen'
const defaultOptions = {} as const

export type GetUsersListQueryVariables = Types.Exact<{ [key: string]: never }>

export type GetUsersListQuery = {
  __typename?: 'Query'
  getUsers: {
    __typename?: 'UsersPaginationModel'
    pagination: {
      __typename?: 'PaginationModel'
      page: number
      pageSize: number
      pagesCount: number
      totalCount: number
    }
    users: Array<{
      __typename?: 'User'
      createdAt: any
      id: number
      profile: { __typename?: 'Profile'; firstName?: null | string; lastName?: null | string }
      userBan?: { __typename?: 'UserBan'; createdAt: any; reason: string } | null
      userName: string
    }>
  }
}

export const GetUsersListDocument = gql`
  query GetUsersList {
    getUsers {
      users {
        id
        userName
        profile {
          firstName
          lastName
        }
        userBan {
          reason
          createdAt
        }
        createdAt
      }
      pagination {
        page
        pageSize
        pagesCount
        totalCount
      }
    }
  }
`

/**
 * __useGetUsersListQuery__
 *
 * To run a query within a React component, call `useGetUsersListQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetUsersListQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetUsersListQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetUsersListQuery(
  baseOptions?: Apollo.QueryHookOptions<GetUsersListQuery, GetUsersListQueryVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }

  return Apollo.useQuery<GetUsersListQuery, GetUsersListQueryVariables>(
    GetUsersListDocument,
    options
  )
}
export function useGetUsersListLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<GetUsersListQuery, GetUsersListQueryVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }

  return Apollo.useLazyQuery<GetUsersListQuery, GetUsersListQueryVariables>(
    GetUsersListDocument,
    options
  )
}
export function useGetUsersListSuspenseQuery(
  baseOptions?:
    | Apollo.SkipToken
    | Apollo.SuspenseQueryHookOptions<GetUsersListQuery, GetUsersListQueryVariables>
) {
  const options =
    baseOptions === Apollo.skipToken ? baseOptions : { ...defaultOptions, ...baseOptions }

  return Apollo.useSuspenseQuery<GetUsersListQuery, GetUsersListQueryVariables>(
    GetUsersListDocument,
    options
  )
}
export type GetUsersListQueryHookResult = ReturnType<typeof useGetUsersListQuery>
export type GetUsersListLazyQueryHookResult = ReturnType<typeof useGetUsersListLazyQuery>
export type GetUsersListSuspenseQueryHookResult = ReturnType<typeof useGetUsersListSuspenseQuery>
export type GetUsersListQueryResult = Apollo.QueryResult<
  GetUsersListQuery,
  GetUsersListQueryVariables
>
