/** THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. */
import * as Types from '../../../../shared/api/models.gen';

import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
const defaultOptions = {} as const;
export type Get_User_ProfileQueryVariables = Types.Exact<{
  userId: Types.Scalars['Int']['input'];
}>;


export type Get_User_ProfileQuery = { __typename?: 'Query', getUser: { __typename?: 'User', id: number, userName: string, createdAt: any, profile: { __typename?: 'Profile', id: number, firstName?: string | null, lastName?: string | null, avatars?: Array<{ __typename?: 'Avatar', url?: string | null }> | null } } };


export const Get_User_ProfileDocument = gql`
    query GET_USER_PROFILE($userId: Int!) {
  getUser(userId: $userId) {
    id
    userName
    createdAt
    profile {
      id
      firstName
      lastName
      avatars {
        url
      }
    }
  }
}
    `;

/**
 * __useGet_User_ProfileQuery__
 *
 * To run a query within a React component, call `useGet_User_ProfileQuery` and pass it any options that fit your needs.
 * When your component renders, `useGet_User_ProfileQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGet_User_ProfileQuery({
 *   variables: {
 *      userId: // value for 'userId'
 *   },
 * });
 */
export function useGet_User_ProfileQuery(baseOptions: Apollo.QueryHookOptions<Get_User_ProfileQuery, Get_User_ProfileQueryVariables> & ({ variables: Get_User_ProfileQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Get_User_ProfileQuery, Get_User_ProfileQueryVariables>(Get_User_ProfileDocument, options);
      }
export function useGet_User_ProfileLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Get_User_ProfileQuery, Get_User_ProfileQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Get_User_ProfileQuery, Get_User_ProfileQueryVariables>(Get_User_ProfileDocument, options);
        }
export function useGet_User_ProfileSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Get_User_ProfileQuery, Get_User_ProfileQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Get_User_ProfileQuery, Get_User_ProfileQueryVariables>(Get_User_ProfileDocument, options);
        }
export type Get_User_ProfileQueryHookResult = ReturnType<typeof useGet_User_ProfileQuery>;
export type Get_User_ProfileLazyQueryHookResult = ReturnType<typeof useGet_User_ProfileLazyQuery>;
export type Get_User_ProfileSuspenseQueryHookResult = ReturnType<typeof useGet_User_ProfileSuspenseQuery>;
export type Get_User_ProfileQueryResult = Apollo.QueryResult<Get_User_ProfileQuery, Get_User_ProfileQueryVariables>;