/** THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. */
import * as Types from '../../../shared/api/models.gen';

import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
const defaultOptions = {} as const;
export type Get_User_PostsQueryVariables = Types.Exact<{
  userId: Types.Scalars['Int']['input'];
  endCursorId?: Types.InputMaybe<Types.Scalars['Int']['input']>;
}>;


export type Get_User_PostsQuery = { __typename?: 'Query', getPostsByUser: { __typename?: 'PostsByUserModel', pageSize: number, totalCount: number, pagesCount: number, items?: Array<{ __typename?: 'ImagePost', id?: number | null, url?: string | null, createdAt?: any | null }> | null } };


export const Get_User_PostsDocument = gql`
    query GET_USER_POSTS($userId: Int!, $endCursorId: Int) {
  getPostsByUser(userId: $userId, endCursorId: $endCursorId) {
    pageSize
    totalCount
    pagesCount
    items {
      id
      url
      createdAt
    }
  }
}
    `;

/**
 * __useGet_User_PostsQuery__
 *
 * To run a query within a React component, call `useGet_User_PostsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGet_User_PostsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGet_User_PostsQuery({
 *   variables: {
 *      userId: // value for 'userId'
 *      endCursorId: // value for 'endCursorId'
 *   },
 * });
 */
export function useGet_User_PostsQuery(baseOptions: Apollo.QueryHookOptions<Get_User_PostsQuery, Get_User_PostsQueryVariables> & ({ variables: Get_User_PostsQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Get_User_PostsQuery, Get_User_PostsQueryVariables>(Get_User_PostsDocument, options);
      }
export function useGet_User_PostsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Get_User_PostsQuery, Get_User_PostsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Get_User_PostsQuery, Get_User_PostsQueryVariables>(Get_User_PostsDocument, options);
        }
export function useGet_User_PostsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Get_User_PostsQuery, Get_User_PostsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Get_User_PostsQuery, Get_User_PostsQueryVariables>(Get_User_PostsDocument, options);
        }
export type Get_User_PostsQueryHookResult = ReturnType<typeof useGet_User_PostsQuery>;
export type Get_User_PostsLazyQueryHookResult = ReturnType<typeof useGet_User_PostsLazyQuery>;
export type Get_User_PostsSuspenseQueryHookResult = ReturnType<typeof useGet_User_PostsSuspenseQuery>;
export type Get_User_PostsQueryResult = Apollo.QueryResult<Get_User_PostsQuery, Get_User_PostsQueryVariables>;