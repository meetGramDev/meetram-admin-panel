/** THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. */
import * as Types from '../../../../shared/api/models.gen';

import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
const defaultOptions = {} as const;
export type Get_FollowingsQueryVariables = Types.Exact<{
  pageNumber?: Types.InputMaybe<Types.Scalars['Int']['input']>;
  sortBy?: Types.InputMaybe<Types.Scalars['String']['input']>;
  pageSize?: Types.InputMaybe<Types.Scalars['Int']['input']>;
  sortDirection?: Types.InputMaybe<Types.SortDirection>;
  userId: Types.Scalars['Int']['input'];
}>;


export type Get_FollowingsQuery = { __typename?: 'Query', getFollowing: { __typename?: 'FollowPaginationModel', page: number, pageSize: number, pagesCount: number, totalCount: number, items: Array<{ __typename?: 'Follow', userId: number, createdAt: any, id: number, userName?: string | null }> } };


export const Get_FollowingsDocument = gql`
    query GET_FOLLOWINGS($pageNumber: Int = 1, $sortBy: String = "createdAt", $pageSize: Int = 10, $sortDirection: SortDirection = desc, $userId: Int!) {
  getFollowing(
    pageNumber: $pageNumber
    sortBy: $sortBy
    pageSize: $pageSize
    sortDirection: $sortDirection
    userId: $userId
  ) {
    page
    pageSize
    pagesCount
    totalCount
    items {
      userId
      createdAt
      id
      userName
    }
  }
}
    `;

/**
 * __useGet_FollowingsQuery__
 *
 * To run a query within a React component, call `useGet_FollowingsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGet_FollowingsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGet_FollowingsQuery({
 *   variables: {
 *      pageNumber: // value for 'pageNumber'
 *      sortBy: // value for 'sortBy'
 *      pageSize: // value for 'pageSize'
 *      sortDirection: // value for 'sortDirection'
 *      userId: // value for 'userId'
 *   },
 * });
 */
export function useGet_FollowingsQuery(baseOptions: Apollo.QueryHookOptions<Get_FollowingsQuery, Get_FollowingsQueryVariables> & ({ variables: Get_FollowingsQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Get_FollowingsQuery, Get_FollowingsQueryVariables>(Get_FollowingsDocument, options);
      }
export function useGet_FollowingsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Get_FollowingsQuery, Get_FollowingsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Get_FollowingsQuery, Get_FollowingsQueryVariables>(Get_FollowingsDocument, options);
        }
export function useGet_FollowingsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Get_FollowingsQuery, Get_FollowingsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Get_FollowingsQuery, Get_FollowingsQueryVariables>(Get_FollowingsDocument, options);
        }
export type Get_FollowingsQueryHookResult = ReturnType<typeof useGet_FollowingsQuery>;
export type Get_FollowingsLazyQueryHookResult = ReturnType<typeof useGet_FollowingsLazyQuery>;
export type Get_FollowingsSuspenseQueryHookResult = ReturnType<typeof useGet_FollowingsSuspenseQuery>;
export type Get_FollowingsQueryResult = Apollo.QueryResult<Get_FollowingsQuery, Get_FollowingsQueryVariables>;